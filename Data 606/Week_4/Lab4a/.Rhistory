FUN=sum, na.rm=TRUE)
aggdata <-aggregate(canceldf, by=list(Date,Cancelled),
FUN=sum, na.rm=TRUE)
library(hflights)
library(plyr)
library(lubridate)
library(ggplot2)
#set the data frame
df <- data.frame(hflights)
#sub set of observations where the flight was cancelled
cancelled_df <- subset(df, Cancelled == 1)
#create date column and drop redundant columns
cancelled_df$Date <- mdy(sprintf('%s %s %s', cancelled_df$Month, cancelled_df$DayofMonth,
cancelled_df$Year))
#drop columns not needed
drop_col <- names(cancelled_df) %in% c("Year","Month", "DayofMonth",
"DepTime","ArrTime","ActualElapsedTime","AirTime",
"ArrDelay","DepDelay","TaxiIn","TaxiOut","Diverted",
"FlightNum","TailNum")
new_df <- cancelled_df[!drop_col]
#Maps the days to the name of the day
day_name <- c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
day_number <- c(1:7)
new_df$DayOfWeek <- as.factor(mapvalues(new_df$DayOfWeek, day_number, day_name))
sumdf <- data.frame(new_df$Date, new_df$Cancelled)
library(hflights)
library(plyr)
library(lubridate)
library(ggplot2)
#set the data frame
df <- data.frame(hflights)
#sub set of observations where the flight was cancelled
cancelled_df <- subset(df, Cancelled == 1)
#create date column and drop redundant columns
cancelled_df$Date <- mdy(sprintf('%s %s %s', cancelled_df$Month, cancelled_df$DayofMonth,
cancelled_df$Year))
#drop columns not needed
drop_col <- names(cancelled_df) %in% c("Year","Month", "DayofMonth",
"DepTime","ArrTime","ActualElapsedTime","AirTime",
"ArrDelay","DepDelay","TaxiIn","TaxiOut","Diverted",
"FlightNum","TailNum")
new_df <- cancelled_df[!drop_col]
#Maps the days to the name of the day
day_name <- c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
day_number <- c(1:7)
new_df$DayOfWeek <- as.factor(mapvalues(new_df$DayOfWeek, day_number, day_name))
#Map CancellationCode to factor
CCode <- c("A","B","C","D")
CName <- c("carrier","weather","national air system","security")
new_df$CancellationCode <- as.factor(mapvalues(new_df$CancellationCode, CCode,CName))
#verification of the data transformation
head(new_df)
summary(new_df)
colnames(new_df)
#cancellations over the year
sumdf <- data.frame(new_df$Date, new_df$Cancelled)
colnames(sumdf) <- c("Date","Cancelled")
ggplot(sumdf, aes(Date, Cancelled) + geom_line() + xlab("") + ylab("Daily Cancelled Flights"))
ggplot(sumdf, aes(Date, Cancelled) + geom_line() + xlab("") + ylab("Daily Cancelled Flights"))
sumdf
head(sumdf)
ddply(sumdf,~Date,summarise,mean=mean(Cancelled),sd=sd(Cancelled))
x <- ddply(sumdf,~Date,summarise,mean=mean(Cancelled),sd=sd(Cancelled))
x
x <- ddply(sumdf,~Date,summarise,mean=sum(Cancelled))
x
class(x)
x <- ddply(sumdf,~Date,summarise,"Count of Delays" = sum(Cancelled))
ggplot(x, aes(Date, x$`Count of Delays`) + geom_line() + xlab("") + ylab("Daily Cancelled Flights"))
ggplot(x, aes(x$Date, x$`Count of Delays`) + geom_line()
+ xlab("") + ylab("Daily Cancelled Flights"))
ggplot(x, aes(x$Date, x$`Count of Delays`)+ xlab("") + ylab("Daily Cancelled Flights"))
x <- ddply(sumdf,~Date,summarise,"Count of Delays" = sum(Cancelled))
ggplot(x, aes(x$Date, x$`Count of Delays`)+ xlab("") + ylab("Daily Cancelled Flights"))
str(x)
ggplot(x, aes(x$Date, x$`Count of Delays`))+ xlab("") + ylab("Daily Cancelled Flights"))
ggplot(x, aes(x$Date, x$`Count of Delays`))+ xlab("")
+ scale_x_date(format = "%b-%Y") + ylab("Daily Cancelled Flights"))
ggplot(x, aes(x$Date, x$`Count of Delays`)+ xlab("")
+ scale_x_date(format = "%b-%Y") + ylab("Daily Cancelled Flights"))
ggplot(x, aes(x$Date, x$`Count of Delays`))+ xlab("")
+ scale_x_date(format = "%b-%Y") + ylab("Daily Cancelled Flights")
ggplot(x, aes(x$Date, x$`Count of Delays`))+ xlab("")
+ scale_x_date(format = "%b-%Y") + ylab("Daily Cancelled Flights"))
ggplot(aes(x$Date, x$`Count of Delays`))+ xlab("")
+ scale_x_date(format = "%b-%Y") + ylab("Daily Cancelled Flights"))
ggplot(aes(x$Date, x$`Count of Delays`)+ xlab("")
+ scale_x_date(format = "%b-%Y") + ylab("Daily Cancelled Flights"))
x <- ddply(sumdf,~Date,summarise,"Count" = sum(Cancelled))
ggplot(aes(Date,Count)+ xlab("")
+ scale_x_date(format = "%b-%Y") + ylab("Daily Cancelled Flights"))
ggplot(yt.views, aes(Date, Views))
ggplot(aes(Date,Count)+ xlab("") )
ggplot(aes(Date,Count) )
ggplot(aes(Date,Count) )
ggplot(x, aes(Date,Count) )
ggplot(x, aes(x = Date, y = Count) ) + geom_point()
ggplot(x, aes(x = Date, y = Count) ) + geom_line()
ggplot(x, aes(x = Date, y = Count)) + geom_line() + xlab("Date")
ggplot(x, aes(x = Date, y = Count)) + geom_line() + xlab("Date of Flight")
+ ylab("# of Cancelled Flights")
ggplot(x, aes(x = Date, y = Count)) + geom_line() + xlab("Date of Flight")
+ ylab("# of Cancelled Flights")
ggplot(x, aes(x = Date, y = Count)) + geom_line() + xlab("Date of Flight") + ylab("# of Cancelled Flights")
ggplot(x, aes(x = Date, y = Count)) + geom_line() + xlab("Date of Flight") + ylab("# of Cancelled Flights") + scale_x_date(format = "%b-%Y")
ggplot(x, aes(x = Date, y = Count))  + scale_x_date(format = "%b-%Y") + geom_line() + xlab("Date of Flight") + ylab("# of Cancelled Flights")
ggplot(x, aes(x = Date, y = Count)) + geom_line() + xlab("Date of Flight") + ylab("# of Cancelled Flights") + geom_rect(aes(xmin=600, xmax=650, ymin=-3, ymax=3),                                                                                                                      colour=alpha("grey20", 0.5), fill.alpha=0.5)
head(sumdf)
x
summary(x)
y
y <- subset(x, x$Count = 388)
y
x <- ddply(sumdf,~Date,summarise,"Count" = sum(Cancelled))
summary(x)
y <- subset(x, x$Count = 388)
y
summary(x)
y <- subset(x, x$Count == 388)
y
y <- subset(x, x$Count > 300) ###
y
y <- subset(x, x$Count > 100) ###
y
k <- subset(new_df, new_df$Date  >= 2011-02-01 | new_df$Date <= 2011-02-05)
k
hist(k$CancellationCode)
hist( k$Cancelled,names.arg = k$CancellationCode)
str(k)
hist( k$CancellationCode ,names.arg = k$CancellationCode)
plot(k$CancellationCode)
y <- subset(x, x$Count > 100)
y
k <- subset(new_df, new_df$Date  >= 2011-02-01 | new_df$Date <= 2011-02-05)
k <- ordered(CancellationCode, levels = CName)
plot(k$CancellationCode)
k <- ordered(k$CancellationCode, levels = CName)
plot(k$CancellationCode)
y <- subset(x, x$Count > 100)
y
k <- subset(new_df, new_df$Date  >= 2011-02-01 | new_df$Date <= 2011-02-05)
k <- ordered(k$CancellationCode, levels = CName)
plot(k$CancellationCode)
k <- subset(new_df, new_df$Date  >= 2011-02-01 | new_df$Date <= 2011-02-05)
k <- ordered(k$CancellationCode, levels = CName)
plot(k$CancellationCode)
str(k)
k <- subset(new_df, new_df$Date  >= 2011-02-01 | new_df$Date <= 2011-02-05)
k$CancellationCode <- ordered(k$CancellationCode, levels = CName)
str(k)
plot(k$CancellationCode)
qplot(k$CancellationCode)
gerry <- ("I made money on my free time, with old baseball cards you could become rich in thirty days if you buy my collection")
email_score(gerry)
library(editrules)
M_data <- c(1,2,-1,2,1,1,-3,-3,0,5,13,-8)
M <- matrix(M_data, nrow = 3, ncol = 4)
M
Matrix <- editrules::echelon(M)
Matrix[1,1]
Equation_1 <- paste(Matrix[1,1], "y", " + ("Matrix[1,2], "X")
Equation_1 <- paste(Matrix[1,1], "y", " + (", Matrix[1,2], "X")
Equation_1
Equation_1 <- paste(Matrix[1,1], "y", " + ", Matrix[1,2], "X", " + ", Matrix[1,3], " = ", Matrix[1,4])
Equation_1
Matrix <- editrules::echelon(M)
Equation_1 <- paste(Matrix[1,1], "y", " + ", Matrix[1,2], "X", " + ", Matrix[1,3], " = ", Matrix[1,4])
Equation_2 <- paste(Matrix[2,1], "y", " + ", Matrix[2,2], "X", " + ", Matrix[2,3], " = ", Matrix[3,4])
Equation_1
Equation_2
Matrix <- editrules::echelon(M)
Equation_1 <- paste(Matrix[1,1], "y + ", Matrix[1,2], "x + ", Matrix[1,3], "z = ", Matrix[1,4])
Equation_2 <- paste(Matrix[2,1], "y + ", Matrix[2,2], "x + ", Matrix[2,3], "z = ", Matrix[3,4])
Equation_1
Equation_2
Matrix <- editrules::echelon(M)
Equation_1 <- paste(Matrix[1,1], "y + ", Matrix[1,2], "x + ", Matrix[1,3], "z = ", Matrix[1,4])
Equation_2 <- paste(Matrix[2,1], "y + ", Matrix[2,2], "x + ", Matrix[2,3], "z = ", Matrix[3,4])
Equation_3 <- paste(Matrix[3,1], "y + ", Matrix[3,2], "x + ", Matrix[3,3], "z = ", Matrix[4,4])
Equation_1
Equation_2
Equation_3
Matrix <- editrules::echelon(M)
Equation_1 <- paste(Matrix[1,1], "y + ", Matrix[1,2], "x + ", Matrix[1,3], "z = ", Matrix[1,4])
Equation_2 <- paste(Matrix[2,1], "y + ", Matrix[2,2], "x + ", Matrix[2,3], "z = ", Matrix[2,4])
Equation_3 <- paste(Matrix[3,1], "y + ", Matrix[3,2], "x + ", Matrix[3,3], "z = ", Matrix[3,4])
Equation_1
Equation_2
Equation_3
library(editrules)
M_data <- c(1,2,-1,2,1,2,-3,-8,0,5,13,-8)
M <- matrix(M_data, nrow = 3, ncol = 4)
M
Matrix <- editrules::echelon(M)
Equation_1 <- paste(Matrix[1,1], "y + ", Matrix[1,2], "x + ", Matrix[1,3], "z = ", Matrix[1,4])
Equation_2 <- paste(Matrix[2,1], "y + ", Matrix[2,2], "x + ", Matrix[2,3], "z = ", Matrix[2,4])
Equation_3 <- paste(Matrix[3,1], "y + ", Matrix[3,2], "x + ", Matrix[3,3], "z = ", Matrix[3,4])
Equation_1
Equation_2
Equation_3
qplot(k$CancellationCode, xlab = "Cancellation Type", ylab = "# of Cancelled Flights", main = "What type of cancellation was most common?",  color=am )
```{r, echo = FALSE}
\
suppressMessages(suppressWarnings(require(RCurl)))
f <- getURL("https://raw.githubusercontent.com/ChristopheHunt/MSDABridgeCoursework/master/Week_5_Final/Data/Words.Value.csv")
df <- read.csv(text = f)
]
email_score <- function(x){
### the following function scores the email and determines if its spam or not
library(plyr)
new_email <- x
a <- as.matrix(strsplit(new_email,split = " " ))#splits the string into individual words
#b <- sort(a[[1]], decreasing = TRUE) #sorts the
count_of_words <- length(b)
suppressMessages(c <- mapvalues(b, as.vector(df$Word), as.vector(df$Value)))
d <- as.numeric(gsub("[^\\d]+", "", c, perl=TRUE))
emailvalue <- sum(d, na.rm = TRUE)/count_of_words
print(emailvalue)
if ((emailvalue) <= 1) {
print("not spam")
} else {
print("spam")
}
}
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
email_score(x)
y <- ("Want to make $ money working from home? I did and the additional income was great")
email_score(y)
z <- ("Do you want to be your own boss? You could earn double your money from home")
email_score(z)
suppressMessages(suppressWarnings(require(RCurl)))
f <- getURL("https://raw.githubusercontent.com/ChristopheHunt/MSDABridgeCoursework/master/Week_5_Final/Data/Words.Value.csv")
df <- read.csv(text = f)
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
### the following function scores the email and determines if its spam or not
library(plyr)
new_email <- x
a <- as.matrix(strsplit(new_email,split = " " ))#splits the string into individual words
#b <- sort(a[[1]], decreasing = TRUE) #sorts the
count_of_words <- length(b)
suppressMessages(c <- mapvalues(b, as.vector(df$Word), as.vector(df$Value)))
d <- as.numeric(gsub("[^\\d]+", "", c, perl=TRUE))
emailvalue <- sum(d, na.rm = TRUE)/count_of_words
print(emailvalue)
suppressMessages(suppressWarnings(require(RCurl)))
f <- getURL("https://raw.githubusercontent.com/ChristopheHunt/MSDABridgeCoursework/master/Week_5_Final/Data/Words.Value.csv")
df <- read.csv(text = f)
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
### the following function scores the email and determines if its spam or not
library(plyr)
new_email <- x
a <- as.matrix(strsplit(new_email,split = " " ))#splits the string into individual words
#b <- sort(a[[1]], decreasing = TRUE) #sorts the
count_of_words <- length(b)
library(devtools)
install_github("knitcitations", "cboettig")
install.packages("knitcitations", "cboettig")
3
install.packages("knitcitations")
install.packages(c("multcomp", "mvtnorm", "quantmod", "Rcpp", "robustbase"))
library(knitcitations)
cleanbib()
options("citation_format" = "pandoc")
citep("http://knowledgeblog.org/greycite")
write.bibtex(file="references.bib")
library(knitcitations)
cleanbib()
options("citation_format" = "pandoc")
citep("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
cleanbib()
citep("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
citep("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
# Cite an R package using the 'bibentry' object
citep(citation("RCurl"))
# Cite using a search query and an optional argument
citep("Chamberlain taxize", year="2013")
citep("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib", "json")))
citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib", "json"))
citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib"))
x <- citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib"))
bib_metadata(x)
library(knitcitations)
cleanbib()
options("citation_format" = "pandoc")
write.bibtex(file="references.bib")
# Cite an R package using the 'bibentry' object
citep(citation("RCurl"))
# Cite using a search query and an optional argument
citep("Chamberlain taxize", year="2013")
x <- citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib"))
bib_metadata(x)
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
new_email <- x
a <- strsplit(new_email,split = " " )#splits the string into individual words
b <- sort(a[[1]], decreasing = TRUE)
count_of_words <- length(b)
b
a
length(a)
a
d
s
fa
d
length(b)
d
email_score <- function(x){
### the following function scores the email and determines if its spam or not
library(plyr)
new_email <- x
a <- strsplit(new_email,split = " " )#splits the string into individual words and returns a list
b <- sort(a[[1]]) #sorts the list into separate elements
count_of_words <- length(b) #gets the count of words before we clear unmatched words
suppressMessages(c <- mapvalues(b, as.vector(df$Word), as.vector(df$Value))) #maps values from the words document with the training data
d <- as.numeric(gsub("[^\\d]+", "", c, perl=TRUE)) #returns numeric removes everything non-numeric
emailvalue <- sum(d, na.rm = TRUE)/count_of_words #adds the values together and divides by the count of words to get your average value per word
print(emailvalue)
if ((emailvalue) <= 1) { #the value is based on my training strings below
print("not spam")
} else {
print("spam")
}
}
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
email_score(x)
# save a numeric vector containing 48 monthly observations
# from Jan 2009 to Dec 2014 as a time series object
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
# subset the time series (June 2014 to December 2014)
myts2 <- window(myts, start=c(2014, 6), end=c(2014, 12))
# plot series
plot(myts)
install.packages(c("base64enc", "HSAUR", "PKI", "Rcpp", "rJava", "RMySQL", "scatterplot3d", "SciencesPo"))
x <- read.csv("DOHMH.csv", header = TRUE)
getwd()
x <- read.csv("DOHMH.csv", header = TRUE)
x <- read.csv("DOHMH.csv", quote = "", header = TRUE)
x <- read.csv("DOHMH.csv", quote = "")
x <- read.csv("DOHMH.csv", quote = "")
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE = 10040)
t <- subset(x, x$ZIPCODE == 10040)
t
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE == 10040)
head(t)
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE != 10040)
head(t)
t <- subset(x, x$ZIPCODE == 1004)
head(t)
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE == 1004)
head(t)
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE == '10040')
head(t)
x <- read.csv("DOHMH.csv", quote = "")
x <- data.frame(x)
t <- subset(x, x$ZIPCODE == '10040')
head(t)
x <- read.csv("DOHMH.csv", quote = "", header = TRUE)
x <- read.csv("DOHMH.csv", quote = "", header = TRUE,sep=",")
install.packages("bigmemory")
install.packages("ff")
library(ff)
my.obj <- ff(vmode="double", length=10)
my.obj <- [1:10] <- iris$Sepal.Width[1:10]
my.obj <- ff(vmode="double", length=10)
my.obj <- ff(vmode="double", dim = c(10,2))
x <- ff(vmode="double", dim = c(10,2))
??ff
install.packages(c("e1071", "Ecfun", "httpuv", "kernlab", "mapproj", "maps", "RcppArmadillo", "shiny"))
install.packages(c("car", "curl", "e1071", "Ecdat", "kernlab"))
install.packages("reports")
install.packages(c("evaluate", "git2r", "SciencesPo"))
install.packages("xgboost")
install.packages(c("git2r", "knitr", "SciencesPo"))
install.packages(c("animation", "SparseM"))
tract <- readOGR(dsn = localDir, layer = "cb_2014_us_zcta510_500k")
getwd()
localDir
library(rgdal)
library(ggplot2)
library(maps)
tract <- readOGR(dsn = "C:/Users/Christophe/Downloads/Newyorkcityshapefile", layer = "cb_2014_us_zcta510_500k")
ggplot(tract) + geom_path()
head(tract)
x <- fortify(tract, region = "ID")
library(rgdal)
library(ggplot2)
library(maps)
tract <- readOGR(dsn = "C:/Users/Christophe/Downloads/Newyorkcityshapefile", layer = "cb_2014_us_zcta510_500k")
x <- fortify(tract)
memory.limit()
library(rgdal)
library(ggplot2)
library(maps)
tract <- readOGR(dsn = "C:/Users/Christophe/Downloads/Newyorkcityshapefile", layer = "cb_2014_us_zcta510_500k")
x <- fortify(tract)
p <- ggplot(x) + geom_path()
p
library(lego)
par.orig <- par(mar=c(1,10,1,1))
stripchart(legosets$Pieces ~ legosets$Availability, las = 1)
library(shiny)
shiny_demo(lottery)
library(IS606)
shiny_demo(gambler)
shiny_demo('gambler')
library(gambler)
shiny_demo(lottery)
shiny_demo('lottery')
install.packages(c("akima", "devtools", "installr", "Rcpp"))
normalPlot()
install.packages("akima")
pnorm(1, 0, 1)
normalPlot
??normalPlot
IS606::normalPlot
library(IS606)
library(Rcpp)
library(IS606)
library(Rcpp)
library(Rcpp)
library(IS606)
install.packages("Rccp")
install.packages("Rcpp")
library(Rcpp)
library(IS606)
IS606::normalPlot(0,1)
IS606::normalPlot(0, 1, c(-1.13, 100))
IS606::normalPlot(0, 1, c(-1.13, 4))
??IS606::normalPlot
normalPlot(bounds=c(-2,2))
normalPlot(bounds=c(-3,3))
normalPlot(tails=TRUE)
x <- 5034
x
x - 1700
y <- x-1700
y - 1200
1000 + 1200 + 1200
43788 - 1200
4378 - 1200
defective_rate <- .02
prob_ten_fail <- ((1 - defective_rate)^ 10 - 1) * defective_rate
prob_ten_fail
prob_ten_fail <- ((1 - defective_rate)^(10 - 1)) * defective_rate
prob_ten_fail
.98^9
.98^9
x<-.98^9
x*.02
prob_100_no_fail <- ((1 - defective_rate)^(100 -1)) * (1 - defective_rate)
prob_100_no_fail
.98^100
1 / .02
library(openintro)
library(IS606)
rmds <- list.files(paste0(dest_dir, '/', "Lab4"), pattern='.Rmd')
rmds <- list.files(paste0(dest_dir, '/', "Lab4"), pattern='.Rmd')
dest_dir <- "C:/Users/Christophe/Documents/R"
startLab("Lab4", dest_dir = "C:/Users/Christophe/Documents/R", file.prefix = paste("Christophe" , "-"))
dest_dir <- "C:/Users/Christophe/Documents/R"
rmds <- list.files(paste0(dest_dir, '/', "Lab4"), pattern='.Rmd')
startLab("Lab4", dest_dir = "C:/Users/Christophe/Documents/R", file.prefix = paste("Christophe" , "-"))
dest_dir = "C:/Users/Christophe/Documents/R"
rmds <- list.files(paste0(dest_dir, '/', "Lab4"), pattern='.Rmd')
startLab("Lab4", dest_dir = "C:/Users/Christophe/Documents/R", file.prefix = paste("Christophe" , "-"))
getwd()
library(openintro)
library(IS606)
getwd()
setwd("C:/Users/Christophe/Documents/R")
dest_dir = "C:/Users/Christophe/Documents/R"
rmds <- list.files(paste0(dest_dir, '/', "Lab4"), pattern='.Rmd')
startLab("Lab4", dest_dir = "C:/Users/Christophe/Documents/R", file.prefix = paste("Christophe" , "-"))
library(openintro)
library(IS606)
getwd()
setwd("C:/Users/Christophe/Documents/R")
dest_dir = "C:/Users/Christophe/Documents/R"
rmds <- list.files(paste0(dest_dir, '/', "Lab4a"), pattern='.Rmd')
startLab("Lab4a", dest_dir = "C:/Users/Christophe/Documents/R", file.prefix = paste("Christophe" , "-"))
library(openintro)
library(IS606)
getwd()
setwd("C:/Users/Christophe/Documents/R")
dest_dir = "C:/Users/Christophe/Documents/R"
rmds <- list.files(paste0(dest_dir, '/', "Lab4b"), pattern='.Rmd')
startLab("Lab4b", dest_dir = "C:/Users/Christophe/Documents/R", file.prefix = paste("Christophe" , "-"))
setwd(setwd("C:/Users/Christophe/Documents/R/Lab4a"))
load("./more/ames.RData")
setwd("C:/Users/Christophe/Documents/R/Lab4a")
load("./more/ames.RData")
3774
x <- 3774
x - 1700
- 400
