print("not spam")
} else {
print("spam")
}
}
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
email_score(x)
y <- ("Want to make $ money working from home? I did and the additional income was great")
email_score(y)
z <- ("Do you want to be your own boss? You could earn double your money from home")
email_score(z)
suppressMessages(suppressWarnings(require(RCurl)))
f <- getURL("https://raw.githubusercontent.com/ChristopheHunt/MSDABridgeCoursework/master/Week_5_Final/Data/Words.Value.csv")
df <- read.csv(text = f)
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
### the following function scores the email and determines if its spam or not
library(plyr)
new_email <- x
a <- as.matrix(strsplit(new_email,split = " " ))#splits the string into individual words
#b <- sort(a[[1]], decreasing = TRUE) #sorts the
count_of_words <- length(b)
suppressMessages(c <- mapvalues(b, as.vector(df$Word), as.vector(df$Value)))
d <- as.numeric(gsub("[^\\d]+", "", c, perl=TRUE))
emailvalue <- sum(d, na.rm = TRUE)/count_of_words
print(emailvalue)
suppressMessages(suppressWarnings(require(RCurl)))
f <- getURL("https://raw.githubusercontent.com/ChristopheHunt/MSDABridgeCoursework/master/Week_5_Final/Data/Words.Value.csv")
df <- read.csv(text = f)
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
### the following function scores the email and determines if its spam or not
library(plyr)
new_email <- x
a <- as.matrix(strsplit(new_email,split = " " ))#splits the string into individual words
#b <- sort(a[[1]], decreasing = TRUE) #sorts the
count_of_words <- length(b)
library(devtools)
install_github("knitcitations", "cboettig")
install.packages("knitcitations", "cboettig")
3
install.packages("knitcitations")
install.packages(c("multcomp", "mvtnorm", "quantmod", "Rcpp", "robustbase"))
library(knitcitations)
cleanbib()
options("citation_format" = "pandoc")
citep("http://knowledgeblog.org/greycite")
write.bibtex(file="references.bib")
library(knitcitations)
cleanbib()
options("citation_format" = "pandoc")
citep("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
cleanbib()
citep("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
citep("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
# Cite an R package using the 'bibentry' object
citep(citation("RCurl"))
# Cite using a search query and an optional argument
citep("Chamberlain taxize", year="2013")
citep("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf")
citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib", "json")))
citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib", "json"))
citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib"))
x <- citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib"))
bib_metadata(x)
library(knitcitations)
cleanbib()
options("citation_format" = "pandoc")
write.bibtex(file="references.bib")
# Cite an R package using the 'bibentry' object
citep(citation("RCurl"))
# Cite using a search query and an optional argument
citep("Chamberlain taxize", year="2013")
x <- citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib"))
bib_metadata(x)
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
new_email <- x
a <- strsplit(new_email,split = " " )#splits the string into individual words
b <- sort(a[[1]], decreasing = TRUE)
count_of_words <- length(b)
b
a
length(a)
a
d
s
fa
d
length(b)
d
email_score <- function(x){
### the following function scores the email and determines if its spam or not
library(plyr)
new_email <- x
a <- strsplit(new_email,split = " " )#splits the string into individual words and returns a list
b <- sort(a[[1]]) #sorts the list into separate elements
count_of_words <- length(b) #gets the count of words before we clear unmatched words
suppressMessages(c <- mapvalues(b, as.vector(df$Word), as.vector(df$Value))) #maps values from the words document with the training data
d <- as.numeric(gsub("[^\\d]+", "", c, perl=TRUE)) #returns numeric removes everything non-numeric
emailvalue <- sum(d, na.rm = TRUE)/count_of_words #adds the values together and divides by the count of words to get your average value per word
print(emailvalue)
if ((emailvalue) <= 1) { #the value is based on my training strings below
print("not spam")
} else {
print("spam")
}
}
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
email_score(x)
# save a numeric vector containing 48 monthly observations
# from Jan 2009 to Dec 2014 as a time series object
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
# subset the time series (June 2014 to December 2014)
myts2 <- window(myts, start=c(2014, 6), end=c(2014, 12))
# plot series
plot(myts)
install.packages(c("base64enc", "HSAUR", "PKI", "Rcpp", "rJava", "RMySQL", "scatterplot3d", "SciencesPo"))
x <- read.csv("DOHMH.csv", header = TRUE)
getwd()
x <- read.csv("DOHMH.csv", header = TRUE)
x <- read.csv("DOHMH.csv", quote = "", header = TRUE)
x <- read.csv("DOHMH.csv", quote = "")
x <- read.csv("DOHMH.csv", quote = "")
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE = 10040)
t <- subset(x, x$ZIPCODE == 10040)
t
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE == 10040)
head(t)
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE != 10040)
head(t)
t <- subset(x, x$ZIPCODE == 1004)
head(t)
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE == 1004)
head(t)
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE == '10040')
head(t)
x <- read.csv("DOHMH.csv", quote = "")
x <- data.frame(x)
t <- subset(x, x$ZIPCODE == '10040')
head(t)
x <- read.csv("DOHMH.csv", quote = "", header = TRUE)
x <- read.csv("DOHMH.csv", quote = "", header = TRUE,sep=",")
install.packages("bigmemory")
install.packages("ff")
library(ff)
my.obj <- ff(vmode="double", length=10)
my.obj <- [1:10] <- iris$Sepal.Width[1:10]
my.obj <- ff(vmode="double", length=10)
my.obj <- ff(vmode="double", dim = c(10,2))
x <- ff(vmode="double", dim = c(10,2))
??ff
install.packages(c("e1071", "Ecfun", "httpuv", "kernlab", "mapproj", "maps", "RcppArmadillo", "shiny"))
install.packages(c("car", "curl", "e1071", "Ecdat", "kernlab"))
install.packages("reports")
install.packages(c("evaluate", "git2r", "SciencesPo"))
install.packages("xgboost")
install.packages(c("git2r", "knitr", "SciencesPo"))
install.packages(c("animation", "SparseM"))
install.packages("IS606")
install.packages(c("curl", "googleVis", "RMySQL", "scales"))
library(devtools)
devtools::install_github('jbryer/IS606')
test
library(IS606)
devtools::install_github('jbryer/IS606')
library(IS606)
install.packages(c('devtools','openintro'))
devtools::install_github('jbryer/IS606')
install.packages("openintro")
devtools::install_github('jbryer/IS606')
(IS606)
library(IS606)
startLab(1)
startLab('Lab1')
install.packages("IS606")
startLab('Lab1', dest_dir = '/Users/Christophe/Documents/R')
startLab('Lab1', dest_dir = '/Users/Christophe/Documents/R', file.prefix = 'Christophe')
startLab('Lab1', dest_dir = '/Users/Christophe/Documents/R', file.prefix = "Christophe")
startLab()
??startLab()
startLab(l, dest_dir = getwd(), file.prefix = paste0(Sys.info()["Christophe"], "-"))
startLab('Lab1', dest_dir = getwd(), file.prefix = paste0(Sys.info()["Christophe"], "-"))
startLab('Lab1', dest_dir = getwd(), file.prefix = "Christophe" "-")
startLab('Lab1', dest_dir = getwd(), file.prefix = paste("Christophe" , "-"))
startLab('Lab1', dest_dir = '/Users/Christophe/Documents/R', file.prefix = 'Christophe')
startLab('Lab1', dest_dir = '/Users/Christophe/Documents/R')#, file.prefix = 'Christophe')
devtools::install_github('jbryer/IS606')
library(IS606)
library(IS606)
remove.packages('IS606')
devtools::install_github('jbryer/IS606')
library(IS606)
library(openintro)
library(IS606)
library(openintro)
startLab(1)
remove.packages('IS606')
devtools::install_github('jbryer/IS606')
getLabs()
demo(package='IS606')
CLT_mean
startLab(1)
startLab('Lab1')
startLab('Lab1', dest_dir = '/Users/Christophe/Documents/R')#, file.prefix = 'Christophe')
startLab()
startLab('Lab1', dest_dir = 'C:/Users/Christophe/Documents/R')#, file.prefix = 'Christophe')
startLab('Lab1', dest_dir = 'C:/Users/Christophe/Documents/R', file.prefix = 'Christophe')
startLab('Lab1', dest_dir = 'C:/Users/Christophe/Documents/R', file-prefix = 'Christophe')
??startLab
getwd()
startLab('Lab1')
startLab('Lab1', dest_dir = 'C:/Users/Christophe/Documents/R', file.prefix = "Christophe")
startLab('Lab1', dest_dir = "C:/Users/Christophe/Documents/R", file.prefix = "Christophe")
rmds <- list.files(paste0(dest_dir, '/', l), pattern='.Rmd')
dest_dir = "C:/Users/Christophe/Documents/R"
rmds <- list.files(paste0(dest_dir, '/', l), pattern='.Rmd')
startLab("Lab1", dest_dir = "C:/Users/Christophe/Documents/R",
file.prefix = "Christophe")
rmds <- list.files(paste0(dest_dir, '/', "Lab1"), pattern='.Rmd')
startLab("Lab1", dest_dir = "C:/Users/Christophe/Documents/R")
output:
source("more/cdc.R")
```
source("more/cdc.R")
more/cdc.r
more/cdc.R
source("more/cdc.R")
source("more/cdc.r")
library(openintro)
source("more/cdc.R")
names(cdc)
library(RgoogleMaps)
library(sp)
library(ggplot2)
library(ggmap)
DB <- data.frame(FID=P$FID, city=P$city)
DB <- cbind(DB, P@coords)
DB <- data.frame(FID=c(0,1), city=c("New York", "Newark"),   POINT_X=c(-73.996786,-74.172237), POINT_Y=c(40.720813,40.732196 ))
gc <- geocode("new york, usa")
center <- as.numeric(gc)
G <- ggmap(get_googlemap(center = center, color = 'bw', scale = 4), extent = "device")
G1 <- G + geom_point(aes(x=POINT_X, y=POINT_Y ),data=DB, color="red", size=5)
plot(G1)
library(RgoogleMaps)
library(sp)
library(ggplot2)
library(ggmap)
DB <- data.frame(FID=P$FID, city=P$city)
DB <- cbind(DB, P@coords)
DB <- data.frame(FID=c(0,1), city=c("New York", "Newark"),   POINT_X=c(-73.996786,-74.172237), POINT_Y=c(40.720813,40.732196 ))
gc <- geocode("new york, usa")
center <- as.numeric(gc)
G <- ggmap(get_googlemap(center = center, color = 'bw', scale = 4), extent = "device")
G1 <- G + geom_point(aes(x=POINT_X, y=POINT_Y ),data=DB, color="red", size=5)
plot(G1)
install.packages("devtools")
devtools::install_github("ramnathv/htmlwidgets")
devtools::install_github("bokeh/rbokeh")
library(rbokeh)
p <- figure() %>%
ly_points(Sepal.Length, Sepal.Width, data = iris,
color = Species, glyph = Species,
hover = list(Sepal.Length, Sepal.Width))
p
z <- lm(dist ~ speed, data = cars)
p <- figure(width = 600, height = 600) %>%
ly_points(cars, hover = cars) %>%
ly_lines(lowess(cars), legend = "lowess") %>%
ly_abline(z, type = 2, legend = "lm")
p
orstationc <- read.csv("http://geog.uoregon.edu/bartlein/old_courses/geog414s05/data/orstationc.csv")
gmap(lat = 44.1, lng = -120.767, zoom = 6, width = 700, height = 600) %>%
ly_points(lon, lat, data = orstationc, alpha = 0.8, col = "red",
hover = c(station, Name, elev, tann))
point_types()
figure() %>%
ly_points(Sepal.Length, Sepal.Width, data = iris, color = Species) %>%
tool_box_select() %>%
tool_lasso_select()
gmap(lat = 44.1, lng = -120.767, zoom = 6, width = 700, height = 600) %>%
ly_points(lon, lat, data = orstationc, alpha = 0.8, col = "red",
hover = c(station, Name, elev, tann))
library(ggplot2)
trainData <- read.csv("train-sf.csv",header=TRUE,sep=",")
#convert the Dates to only date.
trainData$dateOnly<-format.Date(trainData$Dates,"%Y-%m-%d")
yearMonthData <-as.data.frame(table(format.Date(trainData$Dates,"%Y-%m"),dnn="YearMonth"))
yearMonthData$Year<-substring(yearMonthData$YearMonth,1,4)
yearMonthData$Month<-substring(yearMonthData$YearMonth,6,8)
theme_set(theme_bw())
ggplot(yearMonthData,aes(x=Month,y=Freq,color=factor(Month)))+geom_point()+ggtitle("Crime Per Month/Year")+theme(axis.text.x=element_text(angle=50,hjust=1,vjust=0.25),legend.title = element_text(colour="chocolate", face="bold"))+scale_color_discrete(name="Month")+facet_wrap(~Year,nrow=12,ncol=3)
library(sqldf)
monthYearCategory<-sqldf("select Category,count(1) as count,substr(Dates,1,4) as year,substr(Dates,6,2) as month from trainData group by Category,substr(Dates,1,4),substr(Dates,6,2) order by substr(Dates,1,4),substr(Dates,6,2)")
p<-ggplot(monthYearCategory[monthYearCategory$Category %in% levels(monthYearCategory$Category)[1:6],],aes(month,count,color=Category))+geom_point()
p+facet_grid(year ~ Category,scale="free_y")
p<-ggplot(monthYearCategory[monthYearCategory$Category %in% levels(monthYearCategory$Category)[7:12],],aes(month,count,color=Category))+geom_point()
p+facet_grid(year ~ Category,scale="free_y")
p<-ggplot(monthYearCategory[monthYearCategory$Category %in% levels(monthYearCategory$Category)[13:18],],aes(month,count,color=Category))+geom_point()
p+facet_grid(year ~ Category,scale="free_y")
p<-ggplot(monthYearCategory[monthYearCategory$Category %in% levels(monthYearCategory$Category)[19:24],],aes(month,count,color=Category))+geom_point()
p+facet_grid(year ~ Category,scale="free_y")
p<-ggplot(monthYearCategory[monthYearCategory$Category %in% levels(monthYearCategory$Category)[25:30],],aes(month,count,color=Category))+geom_point()
p+facet_grid(year ~ Category,scale="free_y")
p<-ggplot(monthYearCategory[monthYearCategory$Category %in% levels(monthYearCategory$Category)[31:36],],aes(month,count,color=Category))+geom_point()
p+facet_grid(year ~ Category,scale="free_y")
p<-ggplot(monthYearCategory[monthYearCategory$Category %in% levels(monthYearCategory$Category)[37:39],],aes(month,count,color=Category))+geom_point()
p+facet_grid(year ~ Category,scale="free_y")
ggplot(as.data.frame(table(format.Date(trainData$Dates,"%Y"),dnn="Year")),aes(x=Year,y=Freq))+geom_point()+ggtitle("Per Year")
ggplot(as.data.frame(table(format.Date(trainData$Dates,"%m"),dnn="Month")),aes(x=Month,y=Freq))+geom_point()+ggtitle("Per Month")
ggplot(as.data.frame(table(format.Date(trainData$Dates,"%d"),dnn="Date")),aes(x=Date,y=Freq))+geom_point()+ggtitle("Per Date")
ggplot(yearMonthData,aes(x=YearMonth,y=Freq,color=factor(Month)))+geom_point()+geom_line(aes(group=Month))+ggtitle("Per Year Month")+theme(axis.text.x=element_text(angle=50,hjust=1,vjust=0.5))
ggplot(as.data.frame(table(format.Date(trainData$Dates,"%Y-%m-%d"),dnn="Date")),aes(x=Date,y=Freq))+geom_point()+ggtitle("Per Full Date")
startLab('Lab0', dest_dir = getwd(), file.prefix = paste("Christophe" , "-"))
rmds <- list.files(paste0(dest_dir, '/', "Lab0"), pattern='.Rmd')
dest_dir = "C:/Users/Christophe/Documents/R"
rmds <- list.files(paste0(dest_dir, '/', "Lab0"), pattern='.Rmd')
startLab('Lab0', dest_dir = getwd(), file.prefix = paste("Christophe" , "-"))
getwd()
startLab('Lab0', dest_dir = getwd(), file.prefix = paste("Christophe" , "-"))
startLab('Lab0', dest_dir = getwd(), file.prefix = paste("Christoph" , "-"))
getLabs()
startLab("Lab0", dest_dir = getwd(), file.prefix = paste("Christophe" , "-"))
startLab("Lab0", dest_dir = "C:/Users/Christophe/Documents/R", file.prefix = paste("Christophe" , "-"))
source("more/cdc.R")
library(openintro)
??openintro
source("more/arbuthnot.R")
getwd()
startLab("Lab0", dest_dir = "C:/Users/Christophe/Documents/R", file.prefix = paste("Christophe" , "-"))
rmds <- list.files(paste0(dest_dir, '/', "Lab0"), pattern='.Rmd')
dest_dir = "C:/Users/Christophe/Documents/R"
source("more/arbuthnot.R")
source()
source('more/arbuthnot.R')
setwd("C:/Users/Christophe/Documents/R/Lab0/more")
source("more/arbuthnot.R")
source('more/arbuthnot.R')
source("more/arbuthnot.r")
"more/arbuthnot.R"
arbuthnot <-
structure(list(year = 1629:1710, boys = c(5218L, 4858L, 4422L,
4994L, 5158L, 5035L, 5106L, 4917L, 4703L, 5359L, 5366L, 5518L,
5470L, 5460L, 4793L, 4107L, 4047L, 3768L, 3796L, 3363L, 3079L,
2890L, 3231L, 3220L, 3196L, 3441L, 3655L, 3668L, 3396L, 3157L,
3209L, 3724L, 4748L, 5216L, 5411L, 6041L, 5114L, 4678L, 5616L,
6073L, 6506L, 6278L, 6449L, 6443L, 6073L, 6113L, 6058L, 6552L,
6423L, 6568L, 6247L, 6548L, 6822L, 6909L, 7577L, 7575L, 7484L,
7575L, 7737L, 7487L, 7604L, 7909L, 7662L, 7602L, 7676L, 6985L,
7263L, 7632L, 8062L, 8426L, 7911L, 7578L, 8102L, 8031L, 7765L,
6113L, 8366L, 7952L, 8379L, 8239L, 7840L, 7640L), girls = c(4683L,
4457L, 4102L, 4590L, 4839L, 4820L, 4928L, 4605L, 4457L, 4952L,
4784L, 5332L, 5200L, 4910L, 4617L, 3997L, 3919L, 3395L, 3536L,
3181L, 2746L, 2722L, 2840L, 2908L, 2959L, 3179L, 3349L, 3382L,
3289L, 3013L, 2781L, 3247L, 4107L, 4803L, 4881L, 5681L, 4858L,
4319L, 5322L, 5560L, 5829L, 5719L, 6061L, 6120L, 5822L, 5738L,
5717L, 5847L, 6203L, 6033L, 6041L, 6299L, 6533L, 6744L, 7158L,
7127L, 7246L, 7119L, 7214L, 7101L, 7167L, 7302L, 7392L, 7316L,
7483L, 6647L, 6713L, 7229L, 7767L, 7626L, 7452L, 7061L, 7514L,
7656L, 7683L, 5738L, 7779L, 7417L, 7687L, 7623L, 7380L, 7288L
)), .Names = c("year", "boys", "girls"), class = "data.frame", row.names = c(NA,
-82L))
head(arbuthnot)
getwd()
source("C:/Users/Christophe/Documents/R/Lab0/more/arbuthnot.r")
source(paste(getwd(),"more/arbuthnot.r")
source(paste(getwd(),"more/arbuthnot.r"))
setwd("C:/Users/Christophe/Documents/R/Lab0")
source("./more/arbuthnot.r")
arbuthnot
setwd("C:/Users/Christophe/Documents/R/Lab0")
source("./more/arbuthnot.r")
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$girls, type = "l")
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$girls)
abline(lm(y ~ x))
attach(arbuthnot)
plot(x = arbuthnot$year, y = arbuthnot$girls)
abline(lm(y ~ x))
plot(x = arbuthnot$year, y = arbuthnot$girls)
abline(lm(arbuthnot$girls ~ arbuthnot$year))
library(ggplot2)
ggplot(arbuthnot, aes(year,girls)) + geom_point() + geom_smooth()
ggplot(arbuthnot, aes(year, girls)) + geom_point() + geom_smooth()
5218 + 4683
arbuthnot$boys + arbuthnot$girls
plot(arbuthnot$year, arbuthnot$boys + arbuthnot$girls, type = "l")
plot(arbuthnot$year, arbuthnot$boys + arbuthnot$girls, type = "l")
5218 / 4683
arbuthnot$boys / arbuthnot$girls
5218 / (5218 + 4683)
arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls)
x <- (arbuthnot$year, (arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls))
x <- c(arbuthnot$year, (arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls))
x
x <- arbuthnot$year
y <- (arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls))
df <- data.frame(x,y)
x <- arbuthnot$year
y <- (arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls))
#df <- data.frame(x,y)
setwd("C:/Users/Christophe/Documents/R/Lab0")
source("./more/arbuthnot.r")
x <- arbuthnot$year
y <- (arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls))
ggplot(aes(x, y)) + geom_point() + geom_smooth()
library(ggplot2)
x <- arbuthnot$year
y <- (arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls))
ggplot(aes(x, y)) + geom_point() + geom_smooth()
x <- arbuthnot$year
y <- (arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls))
df <- data.frame(x,y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth()
ggplot(df, aes(x, y)) + geom_point() + geom_smooth() + ylim(0,1)
setwd("C:/Users/Christophe/Documents/R/Lab0")
source("./more/present.R")
present
summary(present$year)
length(present$year)
setwd("C:/Users/Christophe/Documents/R/Lab0")
source("./more/present.R")
length(present$year)
length(present$year)
setwd("C:/Users/Christophe/Documents/R/Lab0")
source("./more/present.R")
setwd("C:/Users/Christophe/Documents/R/Lab0")
source("./more/present.R")
length(present$year)
print(paste("The number of years in the data set are ",length(present$year))
print(paste("The number of years in the data set are ",length(present$year))
paste("The number of years in the data set are ",length(present$year))
dim(present)
names(present)
setwd("C:/Users/Christophe/Documents/R/Lab0")
source("./more/arbuthnot.r")
paste("The dimensions of present are ", dim(present), "Whereas the dimensions of arbuthnot is  ",dim(arbuthnot))
paste("The dimensions of present are ", as.vector(dim(present)), "Whereas the dimensions of arbuthnot is  ",dim(arbuthnot))
paste("The dimensions of present are ", as.character(dim(present)), "Whereas the dimensions of arbuthnot is  ",as.character(dim(arbuthnot)))
paste("The dimensions of present are ", as.vector(dim(present)), "Whereas the dimensions of arbuthnot is  ",as.vector(dim(arbuthnot)))
x <- data.frame(dim(present))
x
paste("The count of observations for present are ", x[1] , "Whereas the dimensions of arbuthnot is  ",as.vector(dim(arbuthnot)))
x[1,]
x <- data.frame(dim(present))
y <- data.frame(dim(arbuthnot))
paste("The count of observations for present are ", x[1,] , "whereas the count of observations for arbuthnot is  ", y[1,])
paste("The count of observations for present are", x[1,] , "whereas the count of observations for arbuthnot is ", y[1,])
x <- data.frame(dim(present))
y <- data.frame(dim(arbuthnot))
paste("The count of observations for present are", x[1,] , "whereas the count of observations for arbuthnot is", y[1,])
paste("The count of variables for present are", x[2,] , "whereas the count of variables for arbuthnot is", y[2,])
df <- present
df$total <- present$boys + present$girls
df <- present[order(total),]
df <- present
df$total <- df$boys + df$girls
df <- present[order(total),]
df <- present
df$total <- df$boys + df$girls
df <- df[order(total),]
df <- present
df$total <- df$boys + df$girls
df <- df[order(df$total),]
df <- present
df$total <- df$boys + df$girls
df <- df[order(df$total),]
tail(df, n =1)
head(df, n =1)
df <- present
df$total <- df$boys + df$girls
df <- df[order(-df$total),]
head(df, n =1)
df <- present
df$total <- df$boys + df$girls
df <- df[order(-df$total),]
x <- head(df, n = 1)
paste("The year with the most number of births in the data set present is", x[1,])
paste("The year with the most number of births in the data set present is", x$year)
x <- present$year
y <- (present$boys / (present$boys + present$girls))
df <- data.frame(x,y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth() + ylim(.25,.75)
x <- present$year
y <- (present$boys / (present$boys + present$girls))
df <- data.frame(x,y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth() #+ ylim(.25,.75)
x <- present$year
y <- (present$boys / (present$boys + present$girls))
df <- data.frame(x,y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth() + ylim(0,1)
install.MikTeX()
install.packages("install.MikTex")
install.MikTeX()
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
# Installing pandoc
install.pandoc()
