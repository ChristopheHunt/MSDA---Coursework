install.packages("rvest")
(0.67^2)
library(scales)
precent(0.4489)
install_github("slidify", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(googleVis)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=FALSE)
View(train)
pacf(train)
train_complete <- complete.cases(train)
pacf(train)
View(train)
pacf(train, plot = FALSE)
ar(train)
ar(train, na.action = na.pass)
ar(train, na.action = na.pass, aic = TRUE, order.max = NULL, method = c("yule-walker"))
train_complete <- (train)
train_complete[complete.cases(train),]
train_complete[complete.cases(train_complete),]
train_complete <- train_complete[complete.cases(train_complete),]
train_complete <- [complete.cases(train),]
train_complete <- train[complete.cases(train),]
install.packages("arules")
library(arules)
apriori(train_complete, parameter = NULL, appearance = NULL, control = NULL)
library(arules)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
apriori(train_complete, parameter = NULL, appearance = NULL, control = NULL)
train_complete$FinelineNumber <- as.factor(train_complete$FinelineNumber)
apriori(train_complete, parameter = NULL, appearance = NULL, control = NULL)
??colwise()
colwise(as.factor)
library(plyr)
colwise(as.factor)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
train_complete$FinelineNumber <- as.factor(train_complete$FinelineNumber)
factor <- c("TripType", "VisitNumber", "Weekday", "UPC", "ScanCount")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "ScanCount")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
apriori(train_complete, parameter = NULL, appearance = NULL, control = NULL)
summary(train_complete.apriori)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
train_complete$FinelineNumber <- as.factor(train_complete$FinelineNumber)
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "ScanCount")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.apriori <- apriori(train_complete, parameter = NULL, appearance = NULL, control = NULL)
summary(train_complete.apriori)
inspect(train_complete.apriori)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
drops <- c("ScanCount")
train_complete[,!(names(train_complete) %in% drops)]
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "FinelineNumber")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.apriori <- apriori(train_complete, parameter = NULL, appearance = NULL, control = NULL)
summary(train_complete.apriori)
inspect(train_complete.apriori)
drops <- c("ScanCount")
train_complete[,!(names(train_complete) %in% drops)]
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
drops <- c("ScanCount")
train_complete <- train_complete[,!(names(train_complete) %in% drops)]
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "FinelineNumber")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.apriori <- apriori(train_complete, parameter = NULL, appearance = NULL, control = NULL)
summary(train_complete.apriori)
inspect(train_complete.apriori)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
drops <- c("ScanCount")
train_complete <- train_complete[,!(names(train_complete) %in% drops)]
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "FinelineNumber")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.apriori <- apriori(train_complete, parameter = list(support= 0.1, target="frequent"), appearance = NULL, control = NULL)
summary(train_complete.apriori)
inspect(train_complete.apriori)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "FinelineNumber", "ScanCount")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.apriori <- apriori(train_complete, parameter = list(support= 0.1, target="frequent"), appearance = NULL, control = NULL)
summary(train_complete.apriori)
inspect(train_complete.apriori)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "FinelineNumber", "ScanCount")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.apriori <- apriori(train_complete, parameter =  list(support=0.2, confidence = 0.5), appearance = list(rhs = c("TripType"), default="lhs"), control = NULL)
summary(train_complete.apriori)
inspect(train_complete.apriori)
data("Adult")
rules <- apriori(train_complete, parameter = list(support = 0.4))
inspect(rules)
sort(train_complete, decreasing = TRUE, na.last = NA, by = "support")
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "FinelineNumber", "ScanCount")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.apriori <- apriori(train_complete, parameter =  list(support=0.2, confidence = 0.5), appearance = list(rhs = c("TripType"), default="lhs"), control = NULL)
summary(train_complete.apriori)
inspect(train_complete.apriori)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "ScanCount", "FinelineNumber")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.eclat <- eclat(train_complete, parameter = new("ECparameter", support = .129, minlen = 2))
summary(train_complete.eclat)
inspect(train_complete.eclat)
train_complete.cluster <- dist(train_complete, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete.cluster <- dist(train_complete, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete.sample <- sample(train_complete, 100000)
train_complete.cluster <- dist(train_complete, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete.sample <- sample(train_complete, 10000)
train_complete.cluster <- dist(train_complete, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete.sample <- sample(train_complete, 1000)
train_complete.cluster <- dist(train_complete, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
summary(train_complete.cluster)
inspect(train_complete.cluster)
library(cluster)
train_complete.sample <- sample(train_complete, 1000)
train_complete.cluster <- dist(train_complete.sample, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete.sample <- sample(train_complete, 1000)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 1000, replace = FALSE)
train_complete.cluster <- dist(train_complete.sample, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 1000, replace = FALSE),]
train_complete.cluster <- dist(train_complete.sample, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "FinelineNumber", "ScanCount")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.apriori <- apriori(train_complete, parameter =  list(support=0.2, confidence = 0.5), appearance = list(rhs = c("TripType"), default="lhs"), control = NULL)
summary(train_complete.apriori)
inspect(train_complete.apriori)
library(cluster)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 1000, replace = FALSE),]
train_complete.cluster <- dist(train_complete.sample, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
summary(train_complete.cluster)
inspect(train_complete.cluster)
library(cluster)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 1000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = c("euclidean"), stand = FALSE, type = list())
library(cluster)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 1000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = c("euclidean", "manhattan", "gower"), stand = FALSE, type = list())
summary(train_complete.cluster)
library(cluster)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 1000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = "euclidean", stand = FALSE, type = list())
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete.kmeans <- kmeans(train_complete, centers = 10)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
factor <- c("TripType", "VisitNumber", "Weekday", "Upc", "FinelineNumber", "ScanCount")
train_complete[factor] <- lapply(train_complete[factor], as.factor)
train_complete.kmeans <- kmeans(train_complete, centers = 10)
train_complete.kmeans <- kmeans(train_complete, centers = 100)
train_complete$ScanCount <- as.numeric(train_complete$ScanCount)
train_complete.kmeans <- kmeans(train_complete, centers = 100)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete[factor] <- lapply(train_complete[factor], as.factor)
library(arules)
library(plyr)
train <- read.csv("C:/Users/Christophe/Downloads/train.csv/train.csv", stringsAsFactors=TRUE)
train_complete <- train[complete.cases(train),]
train_complete$Upc <- as.character(train_complete$Upc)
train_complete$ScanCount <- as.numeric(train_complete$ScanCount)
train_complete.kmeans <- kmeans(train_complete, centers = 100)
library(cluster)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 1000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = "euclidean", stand = FALSE, type = list())
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete.kmeans <- kmeans(train_complete, inter.max = 10, nstart = 1, algorithm = c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen"))
train_complete.kmeans <- kmeans(train_complete, inter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
train_complete.kmeans <- kmeans(train_complete, centers, inter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
train_complete.kmeans <- kmeans(train_complete, centers, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
train_complete.kmeans <- kmeans(train_complete, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
train_complete.kmeans <- kmeans(train_complete, centers = 10, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
train_complete.kmeans <- kmeans(train_complete.sample, centers = 10, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
head(model.matrix(~.+0, data=train_complete.sample))
train.complete.k <- (model.matrix(~.+0, data=train_complete))
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 10000, replace = FALSE),]
train.complete.k <- (model.matrix(~.+0, data=train_complete.sample))
train_complete.kmeans <- kmeans(train_complete.sample, centers = 10, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
View(train.complete.k)
source('~/.active-rstudio-document', echo=TRUE)
train_complete.eclat <- eclat(train_complete, parameter = new("ECparameter", support = .129, minlen = 2))
summary(train_complete.eclat)
inspect(train_complete.eclat)
library(cluster)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 1000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = "euclidean", stand = FALSE, type = list())
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete$ScanCount <- as.numeric(train_complete$ScanCount)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 10000, replace = FALSE),]
train.complete.k <- (model.matrix(~.+0, data=train_complete.sample))
train_complete.kmeans <- kmeans(train_complete.sample, centers = 10, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
summary(train_complete.cluster)
inspect(train_complete.cluster)
train_complete.kmeans <- kmeans(train_complete.sample, centers, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
train_complete.kmeans <- kmeans(train_complete.sample, centers = 100, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
train_complete.kmeans <- kmeans(train_complete.sample, centers = 100, iter.max = 1000, nstart = 1, algorithm = "Hartigan-Wong")
train_complete.kmeans <- kmeans(train_complete.cluster, centers = 100, iter.max = 1000, nstart = 1, algorithm = "Hartigan-Wong")
train_complete.kmeans <- kmeans(train_complete.cluster, centers = 10, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
summary(train_complete.kmeans)
train_complete.cluster <- daisy(train_complete, metric = "euclidean", stand = FALSE, type = list())
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 200000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = "euclidean", stand = FALSE, type = list())
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 100000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = "euclidean", stand = FALSE, type = list())
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 50000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = "euclidean", stand = FALSE, type = list())
train.complete.k <- (model.matrix(~.+0, data=train_complete.sample))
train_complete.kmeans <- kmeans(train_complete.cluster, centers = 10, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
library(cluster)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 10000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = "euclidean", stand = FALSE, type = list())
train.complete.k <- (model.matrix(~.+0, data=train_complete.sample))
train_complete.kmeans <- kmeans(train_complete.cluster, centers = 10, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
summary(train_complete.kmeans)
train_complete.sample$cluster <- NA
for (i in names(train_complete.kmeans$cluster)) {
train_complete.sample[i, "cluster"] <- train_complete.kmeans$cluster[i]}
View(train_complete.sample)
by(train_complete.kmeans[, c("TripType", "VisitNumber","Weekday","Upc","ScanCount","DepartmentDescription","FinelineNumber")], INDICES = train_complete.kmeans$cluster, FUN = mean)
by(train_complete.sample[, c("TripType", "VisitNumber","Weekday","Upc","ScanCount","DepartmentDescription","FinelineNumber")], INDICES = train_complete.kmeans$cluster, FUN = mean)
library(cluster)
train_complete.sample <- train_complete[sample(1:nrow(train_complete), 10000, replace = FALSE),]
train_complete.cluster <- daisy(train_complete.sample, metric = "euclidean", stand = FALSE, type = list())
# train.complete.k <- (model.matrix(~.+0, data=train_complete.sample)) ## this is interesting to break out values
train_complete.kmeans <- kmeans(train_complete.cluster, centers = 10, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong")
summary(train_complete.kmeans)
inspect(train_complete.cluster)
train_complete.sample$cluster <- NA
for (i in names(train_complete.kmeans$cluster)) {
train_complete.sample[i, "cluster"] <- train_complete.kmeans$cluster[i]}
by(train_complete.sample[, c("TripType", "VisitNumber","Weekday","Upc","ScanCount","DepartmentDescription","FinelineNumber")], INDICES = train_complete.kmeans$cluster, FUN = mean)
by(train_complete.sample, INDICES = train_complete.sample$cluster, FUN = mean)
View(train_complete.sample)
by(train_complete.sample[, c("TripType")], INDICES = train_complete.sample$cluster, FUN = mean)
plot(train_complete.sample$TripType~train_complete.sample$cluster)
plot(train_complete.sample$TripType, train_complete.sample$cluster)
plot( train_complete.sample$cluster, train_complete.sample$TripType,)
plot( train_complete.sample$cluster, train_complete.sample$TripType)
library(ggplot2)
ggplot(train_complete.sample, aes(x = Weekday, y = TripType, fill = cluster))
ggplot(train_complete.sample, aes(x = Weekday, y = TripType, fill = cluster)) + geom_boxplot()
ggplot(train_complete.sample, aes(x = Weekday, y = TripType, fill = cluster)) + geom_point()
ggplot(train_complete.sample, aes(x = DepartmentDescription, y = TripType, fill = cluster)) + geom_point()
ggplot(train_complete.sample, aes(x = cluster, y = TripType, fill = Weekday)) + geom_point()
ggplot(train_complete.sample, aes(x = cluster, y = TripType, fill = Weekday)) + geom_area()
ggplot(train_complete.sample, aes(x = cluster, y = TripType, fill = Weekday)) + geom_histogram()
ggplot(train_complete.sample, aes(x = cluster, y = TripType, fill = Weekday)) + geom_line()
ggplot(train_complete.sample, aes(x = cluster, y = TripType, fill = Weekday)) + geom_bar()
ggplot(train_complete.sample, aes(x = cluster, y = TripType, fill = Weekday)) + geom_jitter()
ggplot(train_complete.sample, aes(x = cluster, y = TripType, shape = Weekday)) + geom_jitter()
ggplot(train_complete, aes(x = weekday, y = TripType, shape = DepartmentDescription)) + geom_jitter())
ggplot(train_complete, aes(x = weekday, y = TripType, shape = DepartmentDescription)) + geom_jitter()
ggplot(train_complete, aes(x = Weekday, y = TripType, shape = DepartmentDescription)) + geom_jitter()
ggplot(train_complete, aes(x = DepartmentDescription, y = TripType, fill = Weekday)) + geom_jitter()
ggplot(train_complete, aes(x = DepartmentDescription, y = TripType, shape = Weekday)) + geom_jitter() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
source('~/.active-rstudio-document', echo=TRUE)
395 - 372
print("hello world")
x <- c("hello world")
x[2:3]
x[[1]]
x[[1:4]]
x[1,2]
x <- as.vector(x)
x[[1]]
x[1]
x[1:10]
source('~/.active-rstudio-document', echo=TRUE)
library(scales)
comma(6.48e-06 )
3.47 + .17239
comma(1.84e-05)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
library(stargazer)
stargazer(m_full)
step(full, data=m_full, direction="backward")
step( data=m_full, direction="backward")
step(m_full, data=evals, direction="backward")
step(m_full, data=evals, direction="backward")
lm(formula = score ~ ethnicity + gender + language + age + cls_perc_eval +
cls_credits + bty_avg + pic_outfit + pic_color, data = evals)
stargazer(best_model, title = 'Regression Results For Best Model', header = FALSE )
step(m_full, data=evals, direction="backward")
best_model <- lm(formula = score ~ ethnicity + gender + language + age + cls_perc_eval +
cls_credits + bty_avg + pic_outfit + pic_color, data = evals)
stargazer(best_model, title = 'Regression Results For Best Model', header = FALSE )
stargazer(best_model, title = 'Regression Results For Best Model', header = FALSE )
plot(m_full$residuals, evals)
plot(m_full$residuals, evals$score)
