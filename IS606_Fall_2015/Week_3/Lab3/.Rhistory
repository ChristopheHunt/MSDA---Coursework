# Cite using a search query and an optional argument
citep("Chamberlain taxize", year="2013")
x <- citet("http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf", format = c("bib"))
bib_metadata(x)
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
new_email <- x
a <- strsplit(new_email,split = " " )#splits the string into individual words
b <- sort(a[[1]], decreasing = TRUE)
count_of_words <- length(b)
b
a
length(a)
a
d
s
fa
d
length(b)
d
email_score <- function(x){
### the following function scores the email and determines if its spam or not
library(plyr)
new_email <- x
a <- strsplit(new_email,split = " " )#splits the string into individual words and returns a list
b <- sort(a[[1]]) #sorts the list into separate elements
count_of_words <- length(b) #gets the count of words before we clear unmatched words
suppressMessages(c <- mapvalues(b, as.vector(df$Word), as.vector(df$Value))) #maps values from the words document with the training data
d <- as.numeric(gsub("[^\\d]+", "", c, perl=TRUE)) #returns numeric removes everything non-numeric
emailvalue <- sum(d, na.rm = TRUE)/count_of_words #adds the values together and divides by the count of words to get your average value per word
print(emailvalue)
if ((emailvalue) <= 1) { #the value is based on my training strings below
print("not spam")
} else {
print("spam")
}
}
x <- ("Hi Christophe, will you have the project done today? It has be sent out COB")
email_score(x)
# save a numeric vector containing 48 monthly observations
# from Jan 2009 to Dec 2014 as a time series object
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
# subset the time series (June 2014 to December 2014)
myts2 <- window(myts, start=c(2014, 6), end=c(2014, 12))
# plot series
plot(myts)
install.packages(c("base64enc", "HSAUR", "PKI", "Rcpp", "rJava", "RMySQL", "scatterplot3d", "SciencesPo"))
x <- read.csv("DOHMH.csv", header = TRUE)
getwd()
x <- read.csv("DOHMH.csv", header = TRUE)
x <- read.csv("DOHMH.csv", quote = "", header = TRUE)
x <- read.csv("DOHMH.csv", quote = "")
x <- read.csv("DOHMH.csv", quote = "")
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE = 10040)
t <- subset(x, x$ZIPCODE == 10040)
t
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE == 10040)
head(t)
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE != 10040)
head(t)
t <- subset(x, x$ZIPCODE == 1004)
head(t)
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE == 1004)
head(t)
x <- read.csv("DOHMH.csv", quote = "")
head(x)
str(x)
t <- subset(x, x$ZIPCODE == '10040')
head(t)
x <- read.csv("DOHMH.csv", quote = "")
x <- data.frame(x)
t <- subset(x, x$ZIPCODE == '10040')
head(t)
x <- read.csv("DOHMH.csv", quote = "", header = TRUE)
x <- read.csv("DOHMH.csv", quote = "", header = TRUE,sep=",")
install.packages("bigmemory")
install.packages("ff")
library(ff)
my.obj <- ff(vmode="double", length=10)
my.obj <- [1:10] <- iris$Sepal.Width[1:10]
my.obj <- ff(vmode="double", length=10)
my.obj <- ff(vmode="double", dim = c(10,2))
x <- ff(vmode="double", dim = c(10,2))
??ff
install.packages(c("e1071", "Ecfun", "httpuv", "kernlab", "mapproj", "maps", "RcppArmadillo", "shiny"))
install.packages(c("car", "curl", "e1071", "Ecdat", "kernlab"))
install.packages("reports")
install.packages(c("evaluate", "git2r", "SciencesPo"))
install.packages("xgboost")
install.packages(c("git2r", "knitr", "SciencesPo"))
install.packages(c("animation", "SparseM"))
tract <- readOGR(dsn = localDir, layer = "cb_2014_us_zcta510_500k")
getwd()
localDir
library(rgdal)
library(ggplot2)
library(maps)
tract <- readOGR(dsn = "C:/Users/Christophe/Downloads/Newyorkcityshapefile", layer = "cb_2014_us_zcta510_500k")
ggplot(tract) + geom_path()
head(tract)
x <- fortify(tract, region = "ID")
library(rgdal)
library(ggplot2)
library(maps)
tract <- readOGR(dsn = "C:/Users/Christophe/Downloads/Newyorkcityshapefile", layer = "cb_2014_us_zcta510_500k")
x <- fortify(tract)
memory.limit()
library(rgdal)
library(ggplot2)
library(maps)
tract <- readOGR(dsn = "C:/Users/Christophe/Downloads/Newyorkcityshapefile", layer = "cb_2014_us_zcta510_500k")
x <- fortify(tract)
p <- ggplot(x) + geom_path()
p
library(lego)
par.orig <- par(mar=c(1,10,1,1))
stripchart(legosets$Pieces ~ legosets$Availability, las = 1)
library(shiny)
shiny_demo(lottery)
library(IS606)
shiny_demo(gambler)
shiny_demo('gambler')
library(gambler)
shiny_demo(lottery)
shiny_demo('lottery')
install.packages(c("akima", "devtools", "installr", "Rcpp"))
normalPlot()
install.packages("akima")
pnorm(1, 0, 1)
normalPlot
??normalPlot
IS606::normalPlot
library(IS606)
library(Rcpp)
library(IS606)
library(Rcpp)
library(Rcpp)
library(IS606)
install.packages("Rccp")
install.packages("Rcpp")
library(Rcpp)
library(IS606)
IS606::normalPlot(0,1)
IS606::normalPlot(0, 1, c(-1.13, 100))
IS606::normalPlot(0, 1, c(-1.13, 4))
??IS606::normalPlot
normalPlot(bounds=c(-2,2))
normalPlot(bounds=c(-3,3))
normalPlot(tails=TRUE)
x <- 5034
x
x - 1700
y <- x-1700
y - 1200
1000 + 1200 + 1200
43788 - 1200
4378 - 1200
defective_rate <- .02
prob_ten_fail <- ((1 - defective_rate)^ 10 - 1) * defective_rate
prob_ten_fail
prob_ten_fail <- ((1 - defective_rate)^(10 - 1)) * defective_rate
prob_ten_fail
.98^9
.98^9
x<-.98^9
x*.02
prob_100_no_fail <- ((1 - defective_rate)^(100 -1)) * (1 - defective_rate)
prob_100_no_fail
.98^100
1 / .02
fdmis
fdims
source('~/.active-rstudio-document', echo=TRUE)
fdims
View(fdims)
summary(fdims$age)
qqnormsim(fdims$bii.di)
par(mar=c(1,1,1,1))
qqnormsim(fdims$bii.di)
qqnormsim(fdims$elb.di)
qqnorm(fdims$bii.di)
qqnorm(fdims$elb.di)
standardized_wgt <- (fdims$wgt) - mean(fdims$wgt)
standardized_wgt <- standardized_wgt/(sd(standardized_wgt))
standardized_wgt
qqnorm(standardized_wgt)
qqline(standardized_wgt)
standardize_lab3 <- function()
{
x <- x - mean(x)
x <- x / sd(x)
return(list(x))
}
standardize_lab3(fdims$bii.di)
standardize_lab3 <- function(x)
{
x <- x - mean(x)
x <- x / sd(x)
return(list(x))
}
standardize_lab3(fdims$bii.di)
standardize_lab3 <- function(x)
{
x <- x - mean(x)
x <- x / sd(x)
return(list(x))
}
standardized_wgt <- standardize_lab3(fdims$bii.di)
qqnorm(standardized_wgt)
qqline(standardized_wgt)
standardize_lab3 <- function(x)
{
x <- x - mean(x)
x <- x / sd(x)
return(x)
}
standardized_wgt <- standardize_lab3(fdims$bii.di)
qqnorm(standardized_wgt)
qqline(standardized_wgt)
hist(fdims$kne.di, probability = TRUE, ylim = c(0,.6))
kne.di_mean <- mean(fdims$kne.di)
kne.di_sd <- sd(fdims$kne.di)
x <- round(min(fdims$kne.di) ,-1):round(max(fdims$kne.di) ,-1)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
hist(fdims$kne.di, probability = TRUE, ylim = c(0,.6))
kne.di_mean <- mean(fdims$kne.di)
kne.di_sd <- sd(fdims$kne.di)
x <- round(min(fdims$kne.di) - 5   ,-1):round(max(fdims$kne.di) + 5 ,-1)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
hist(fdims$kne.di, probability = TRUE, ylim = c(0,.6))
kne.di_mean <- mean(fdims$kne.di)
kne.di_sd <- sd(fdims$kne.di)
x <- round(min(fdims$kne.di) - 1   ,-1):round(max(fdims$kne.di) + 5 ,-1)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
hist(fdims$kne.di, probability = TRUE, ylim = c(0,.6))
kne.di_mean <- mean(fdims$kne.di)
kne.di_sd <- sd(fdims$kne.di)
x <- round(min(fdims$kne.di) - 1   ,-1):round(max(fdims$kne.di) ,-1)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
min(fdims$kne.di)
hist(fdims$kne.di, probability = TRUE, ylim = c(0,.6))
kne.di_mean <- mean(fdims$kne.di)
kne.di_sd <- sd(fdims$kne.di)
x <- round(min(fdims$kne.di)  ,0):round(max(fdims$kne.di) ,0)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
hist(fdims$kne.di, probability = TRUE, ylim = c(0,.6))
kne.di_mean <- mean(fdims$kne.di)
kne.di_sd <- sd(fdims$kne.di)
x <- round(min(fdims$kne.di) - .5  ,0):round(max(fdims$kne.di) ,0)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
max(fdims$kne.di)
round(max(fdims$kne.di) ,0)
hist(fdims$kne.di, probability = TRUE, ylim = c(0,.5))
kne.di_mean <- mean(fdims$kne.di)
kne.di_sd <- sd(fdims$kne.di)
x <- round(min(fdims$kne.di) - .5  ,0):round(max(fdims$kne.di) + .5 ,0)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
hist(mdims$hgt)
hist(fdims$hgt)
d <- fdims$kne.di
hist(d, probability = TRUE, ylim = c(0,.5))
kne.di_mean <- mean(d)
kne.di_sd <- sd(d)
x <- round(min(d) - .5 ,0):round(max(d) + .5 ,0)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
d <- subset(fdims$kne.di, fdims$kne.di < 22
hist(d, probability = TRUE, ylim = c(0,.5))
kne.di_mean <- mean(d)
kne.di_sd <- sd(d)
x <- round(min(d) - .5 ,0):round(max(d) + .5 ,0)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
d <- subset(fdims$kne.di, fdims$kne.di < 22)
hist(d, probability = TRUE, ylim = c(0,.5))
kne.di_mean <- mean(d)
kne.di_sd <- sd(d)
x <- round(min(d) - .5 ,0):round(max(d) + .5 ,0)
y <- dnorm(x = x, mean = kne.di_mean, sd = kne.di_sd)
lines(x = x, y = y, col = "firebrick3")
5034 - 1700
5200 - 1200
heights <- c(54,55,56,56,57,58,58,59,60,60,60,61,61,62,62,63,53,53,64,65,65,67,67,69,76)
qqnorm(heights)
qqnormsim(heights)
d <- heights
hist(d, probability = TRUE, ylim = c(0,.5))
hgt_mean <- mean(d)
hgt_sd <- sd(d)
x <- round(min(d) ,0):round(max(d)  ,0)
y <- dnorm(x = x, mean = hgt_mean, sd = hgt_sd)
lines(x = x, y = y, col = "firebrick3")
qqnormsim(heights)
d <- heights
hist(d, probability = TRUE, ylim = c(0,.1))
hgt_mean <- mean(d)
hgt_sd <- sd(d)
x <- round(min(d) ,0):round(max(d)  ,0)
y <- dnorm(x = x, mean = hgt_mean, sd = hgt_sd)
lines(x = x, y = y, col = "firebrick3")
d <- heights
hist(d, probability = TRUE, ylim = c(0,.1))
hgt_mean <- mean(d)
hgt_sd <- sd(d)
x <- round(min(d) , -1):round(max(d) ,-1)
y <- dnorm(x = x, mean = hgt_mean, sd = hgt_sd)
lines(x = x, y = y, col = "firebrick3")
sum(fdims$hgt > 182)
sum(fdims$hgt > 182) / length(fdims$hgt)
sum(fdims$hgt > 182)
length(fdims$hgt)
sum(fdims$hgt > 182)
sum(length(fdims$hgt > 182))
summary(fdims)
summary(fdims$wgt)
2 / v
0.453592
g <- 0.453592
2 / g
2 * g
1 / 2.20462
convert_pounds_to_kilo <- function(x){x/2.20462}
convert_pounds_to_kilo(40)
convert_pounds_to_kilo(150)
summary(fdims$wgt)
print("What is the probability that a randomly chosen young adult female is heavier than 200 lbs?")
pnorm(q = convert_pounds_to_kilo(150), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
1 - pnorm(q = convert_pounds_to_kilo(200), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
pnorm(q = convert_pounds_to_kilo(200), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
1 - pnorm(q = convert_pounds_to_kilo(180), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
print("What is the probability that a randomly chosen young adult female is heavier than 180 lbs?")
x <- 1 - pnorm(q = convert_pounds_to_kilo(180), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
paste("The probability of a randomly chosen young adult female is heavier than 180 lbs is",
x, sep = " "")
"
print("What is the probability that a randomly chosen young adult female is heavier than 180 lbs?")
x <- 1 - pnorm(q = convert_pounds_to_kilo(180), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
paste("The probability of a randomly chosen young adult female is heavier than 180 lbs is",
x, sep = " ")
print("What is the probability that a randomly chosen young adult female is heavier than 180 lbs?")
x <- 1 - pnorm(q = convert_pounds_to_kilo(180), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
paste("The probability of a randomly chosen young adult female is heavier than 180 lbs is",
percent(x), sep = " ")
library(scales)
print("What is the probability that a randomly chosen young adult female is heavier than 180 lbs?")
x <- 1 - pnorm(q = convert_pounds_to_kilo(180), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
paste("The probability of a randomly chosen young adult female is heavier than 180 lbs is",
percent(x), sep = " ")
print("What is the probability that a randomly chosen young adult",
" female is heavier than 180 lbs?")
x <- 1 - pnorm(q = convert_pounds_to_kilo(180), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
paste("The probability of a randomly chosen young adult",
" female is heavier than 180 lbs",
" using the theoretical normal distribution is",
percent(x), sep = " ")
x <- sum(fdims$hgt > convert_pounds_to_kilo(180)) / length(fdims$hgt)
paste("The probability of a randomly chosen young adult",
" female is heavier than 180 lbs",
" using the method is",
percent(x), sep = " ")
x <- sum(fdims$wght> convert_pounds_to_kilo(180)) / length(fdims$wgt)
paste("The probability of a randomly chosen young adult",
" female is heavier than 180 lbs",
" using the method is",
percent(x), sep = " ")
y <- subset(fdims, fdims$wgt > convert_pounds_to_kilo(180))
y <- subset(fdims, fdims$wgt > convert_pounds_to_kilo(180))
y <- length(y$wgt) / length(fdims$wgt)
paste("The probability of a randomly chosen young adult",
" female is heavier than 180 lbs",
" using the method is",
percent(y), sep = " ")
print("What is the probability that a randomly chosen young adult",
" female is heavier than 180 lbs?")
x <- 1 - pnorm(q = convert_pounds_to_kilo(180), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
paste("The probability of a randomly chosen young adult",
"female is heavier than 180 lbs",
"using the theoretical normal distribution is",
percent(x), sep = " ")
y <- subset(fdims, fdims$wgt > convert_pounds_to_kilo(180))
y <- length(y$wgt) / length(fdims$wgt)
paste("The probability of a randomly chosen young adult",
"female is heavier than 180 lbs",
"using the method is",
percent(y), sep = " ")
x <- pnorm(q = convert_feet_to_centimeters(4), mean = mean(fdims$hgt), sd = sd(fdims$hgt))
convert_pounds_to_kilo <- function(x){
x <- x/2.20462
return(x)
}
convert_feet_to_centimeters <- function(x){
x <- x * 30.48
return(x)
}
x <- pnorm(q = convert_feet_to_centimeters(4), mean = mean(fdims$hgt), sd = sd(fdims$hgt))
x
percent(x)
x <- pnorm(q = convert_feet_to_centimeters(4.5), mean = mean(fdims$hgt), sd = sd(fdims$hgt))
x
percent(x)
y <- subset(fdims, fdims$hgt < convert_feet_to_centimeters(5))
y <- length(y$hgt) / length(fdims$hgt)
paste("The probability of a randomly chosen young adult",
"female is smaller than 5 feet",
"using the empirical method is",
percent(y), sep = " ")
install.packages("quantmod")
library(scales)
paste("What is the probability that a randomly chosen young adult",
" female is heavier than 180 lbs?")
x_1 <- 1 - pnorm(q = convert_pounds_to_kilo(180), mean = mean(fdims$wgt), sd = sd(fdims$wgt))
paste("The probability of a randomly chosen young adult",
"female is heavier than 180 lbs",
"using the theoretical normal distribution is",
percent(x_1), sep = " ")
y_1 <- subset(fdims, fdims$wgt > convert_pounds_to_kilo(180))
y_1 <- length(y_1$wgt) / length(fdims$wgt)
paste("The probability of a randomly chosen young adult",
"female is heavier than 180 lbs",
"using the empirical method is",
percent(y_1), sep = " ")
paste("What is the probability that a randomly chosen young adult",
" female is smaller than 5 feet?")
x_2 <- pnorm(q = convert_feet_to_centimeters(5), mean = mean(fdims$hgt), sd = sd(fdims$hgt))
paste("The probability of a randomly chosen young adult",
"female is smaller than 5 feet",
"using the theoretical normal distribution is",
percent(x_2), sep = " ")
y_2 <- subset(fdims, fdims$hgt < convert_feet_to_centimeters(5))
y_2 <- length(y_2$hgt) / length(fdims$hgt)
paste("The probability of a randomly chosen young adult",
"female is smaller than 5 feet",
"using the empirical method is",
percent(y_2), sep = " ")
library(quantmod)
Delt(x_1, y_1)
Delt(y_1,x_1)
install.packages("maps")
paste("The difference in percentages in the first question is", abs(x_1 - y_1))
paste("The difference in percentages in the first question is", percent(abs(x_1 - y_1)))
paste("The difference in percentages in the first question is", percent(abs(x_1 - y_1)), "and the difference in percentages in the second question is", percent(abs(x_2 - y_1)))
paste("The difference in percentages in the first question is", percent(abs(x_1 - y_1)), "and the difference in percentages in the second question is", percent(abs(x_2 - y_2)))
best_answer <- function(x,y){
if x > y
then return("question 1 is closer")
else {
"question 2 is closer"
}
}
best_answer <- function(x,y){
if x > y
then return("question 1 is closer")
} else {
"question 2 is closer"
}
best_answer <- if(question_1_difference > question_2_difference) {
return("question 1 is closer")
}else {
return("question 2 is closer")
}
question_1_difference <- percent(abs(x_1 - y_1))
question_2_difference <- percent(abs(x_2 - y_2))
best_answer <- if(question_1_difference > question_2_difference) {
return("question 1 is closer")
}else {
return("question 2 is closer")
}
best_answer <- if((question_1_difference > question_2_difference)) {
return("question 1 is closer")
}else {
return("question 2 is closer")
}
best_answer
best_answer <- if((question_1_difference > question_2_difference)) {
print("question 1 is closer")
}else {
print("question 2 is closer")
}
best_answer <- if((question_1_difference > question_2_difference)){
return(print("the height measurement was closer"))
}else {
return(print("the weight measurement was closer"))
}
best_answer <- if((question_1_difference > question_2_difference)){
return(paste("the height measurement was closer"))
}else {
return(paste("the weight measurement was closer"))
}
best_answer <- if((question_1_difference > question_2_difference)){
c("the height measurement was closer")
}else {
c("the weight measurement was closer")
}
best_answer
